import Data.Char
import Data.List

{-
Явная рекурсия в решениях хотя и допускается, но не приветствуется. Старайтесь обходиться стандартными
функциями, используя при этом создание функций «на лету». Пытайтесь максимально упростить уже написанные
решения, применяя подходящие функции из модуля Data.List и любых других модулей. Перед выполнением заданий
изучите примеры из лекции по функциям высшего порядка. 
-}

{-
 1. Простейшие задачи на применение функций map и filter.
 1.1 Преобразовать данный список целых чисел следующим образом:
  a) увеличить все его элементы в два раза;
  b) увеличить все его элементы с четными значениями в два раза;
  с) обнулить все его элементы с нечетными значениями;
  d) удалить из него элементы, большие заданного числа k;
  e) отфильтровать его, оставив в списке только отрицательные числа;
  f) удалить из него все положительные чётные числа.
-}

f11a :: Integral a => [a] -> [a]
f11a = map (*2)

f11b :: Integral a => [a] -> [a]
f11b = map (\x -> if even x then 2*x else x)

f11c :: Integral a => [a] -> [a]
f11c = map (\x -> if odd x then 0 else x)

f11d k = filter (<=k)

f11e = filter (<0)

f11f = filter (\x -> not (even x && x > 0))

{-
 1.2 Дан список декартовых координат точек на плоскости (пар вещественных чисел).
     Преобразовать его следующим образом:
  a) отфильтровать список так, чтобы в нём остались точки из заданной координатной четверти;
  b) преобразовать декартовы координаты в полярные.
-}

f12a n = filter (_f12a n)
	where
		_f12a n (x, y)
			| n == 1 = x >= 0 && y >= 0
			| n == 2 = x < 0 && y > 0
			| n == 3 = x <= 0 && y <= 0
			| otherwise = x > 0 && y < 0

{- TODO: очень сложная формула, а Янушка пока не сделал -}

{-
 1.3 Дан список слов.
  a) Преобразовать все слова к верхнему регистру.
  b) Извлечь из него подсписок слов заданной длины.
  c) Извлечь из него подсписок слов, начинающихся с заданной буквы.
-}

f13a :: [String] -> [String]
f13a = map $ map toUpper

f13b l = filter (\x -> length x == l)

f13c c = filter (\x -> head x == c)

{-
2. Формирование числовых последовательностей (iterate).
 a) Список натуральных чисел, начиная с 0.
 b) Список чётных чисел.
 c) Список элементов последовательности: a0=1, an=(1+an-1)/2.
 d) Список символов английского алфавита.
 e) Список строк, представляющих n-значные двоичные числа.
-}

nats :: [Integer]
nats = iterate (+1) 0

evens = iterate (+2) 2

f2c = iterate (\x -> (1 + x) / 2) 1

f2d = take 26 $ iterate succ 'a'

{- TODO -}

{-
3. Группировка списков.
  a) Дан список символов. Сгруппировать подряд идущие символы по принципу: цифры — не цифры — ...
  b) Дан список пар вещественных чисел (координат точек на плоскости). Сгруппировать подряд идущие
     координаты точек, лежащие в одной координатной четверти.
  c) Дан список и ненулевое натуральное число n. Разбить список на подсписки длиной n каждый.
     Последний подсписок может содержать менее n элементов.
  d) Дан список и ненулевые натуральные числа n и m. Разбить список на перекрывающиеся подсписки
     длиной n элементов со сдвигом относительно предыдущего подсписка на m элементов.
  e) Дан список. Определить длину самого длинного подсписка, содержащего подряд идущие одинаковые элементы.
-}

f3a = groupBy (\x y -> isDigit x && isDigit y)

f3b = groupBy (\(x1,y1) (x2,y2) -> signum x1 * signum x2 + signum y1 * signum y2 == 2)

f3c l n = map (take n) $ takeWhile (\x -> length x > 0) $ iterate (drop n) l

f3d :: [a] -> Int -> Int -> [[a]]
f3d l n m = map (take n) $ takeWhile (\x -> length x > 0) $ iterate (drop m) l

-- Должно быть True
test_f3d = f3d [1..10] 4 2 == [[1,2,3,4],[3,4,5,6],[5,6,7,8],[7,8,9,10],[9,10]]

f3e l = maximum $ map (length . head) $ filter (\x -> length x == 1) $ map (group) l

{-
4. Разные задачи.
 a) Дан текст в виде строки символов, содержащий среди прочего числовые данные. Посчитать количество
    всех упоминающихся в тексте чисел.
 b) Найти сумму всех чисел Фибоначчи, удовлетворяющих заданному предикату, в указанном промежутке
    (например: все чётные от 1 до 106).
 c) Дана строка текста и число n. Сформировать список, содержащий n самых часто используемых
    в строке символов.
 d) Дан список чисел. Сформировать список локальных максимумов исходного списка. Локальным максимумом
    называется элемент, больший своих соседей.
 e) Дан список. Продублировать все его элементы.
-}

f4a l = length $ filter (\x -> isDigit x) l

fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
f4b = takeWhile (<106) $ filter even fibs

f4c n = (take n) . map head . sortBy (\x y -> compare (length y) (length x)) . group . sort

f4d l = map (\(x, y, z) -> y) $ filter (\(x, y, z) -> x <= y && z <= y) $ zip3 ([minBound :: Int] ++ l) l (tail l ++ [minBound :: Int])

f4e = concat . map (\x -> [x] ++ [x])